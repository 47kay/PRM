import { JwtService } from '@nestjs/jwt';
import { Repository } from 'typeorm';
import { User } from '../users/entities/user.entity';
import { RefreshToken } from './entities/refresh-token.entity';
import { Organization } from '../organizations/entities/organization.entity';
import { LoginDto } from './dto/login.dto';
import { RegisterDto } from './dto/register.dto';
export declare class AuthService {
    private readonly userRepository;
    private readonly refreshTokenRepository;
    private readonly organizationRepository;
    private readonly jwtService;
    constructor(userRepository: Repository<User>, refreshTokenRepository: Repository<RefreshToken>, organizationRepository: Repository<Organization>, jwtService: JwtService);
    validateUser(email: string, password: string): Promise<Omit<User, 'password'> | null>;
    login(loginDto: LoginDto): Promise<{
        accessToken: string;
        refreshToken: string;
        user: {
            id: string;
            email: string;
            role: import("../users/enums/role.enum").Role;
            organizationId: string;
            firstName: string;
            lastName: string;
        };
    }>;
    register(registerDto: RegisterDto): Promise<{
        [n: number]: User;
        id: string;
        organizationId: string;
        firstName: string;
        lastName: string;
        email: string;
        phoneNumber?: string;
        role: import("../users/enums/role.enum").Role;
        title?: string;
        department?: string;
        employeeId?: string;
        address?: {
            street: string;
            city: string;
            state: string;
            postalCode: string;
            country: string;
        };
        emergencyContact?: {
            name: string;
            relationship: string;
            phone: string;
            address?: string;
        };
        licenseNumber?: string;
        specialization?: string;
        qualifications?: string[];
        certifications?: string[];
        isOnCall: boolean;
        languages?: string[];
        requirePasswordChange: boolean;
        preferences?: {
            theme?: string;
            notifications?: {
                email?: boolean;
                sms?: boolean;
                inApp?: boolean;
            };
            timezone?: string;
            language?: string;
        };
        metadata?: Record<string, any>;
        isActive: boolean;
        isLocked: boolean;
        isEmailVerified: boolean;
        isPhoneVerified: boolean;
        lastLoginAt?: Date;
        lastActiveAt?: Date;
        deviceTokens?: string[];
        avatar?: string;
        signature?: string;
        createdById: string;
        updatedById?: string;
        createdAt: Date;
        updatedAt: Date;
        deletedAt?: Date;
        organization: Organization;
        createdBy: User;
        updatedBy?: User;
        assignedTickets: import("../tickets/entities/ticket.entity").Ticket[];
        messages: import("../messages/entities/message.entity").Message[];
        appointments: import("../appointments/appointments.module").Appointment[];
        notifications: import("../notifications/entities/notification.entity").Notification[];
        activities: import("../users/entities/user-activity.entity").UserActivity[];
        length: number;
        toString(): string;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string;
        pop(): User | undefined;
        push(...items: User[]): number;
        concat(...items: ConcatArray<User>[]): User[];
        concat(...items: (User | ConcatArray<User>)[]): User[];
        join(separator?: string): string;
        reverse(): User[];
        shift(): User | undefined;
        slice(start?: number, end?: number): User[];
        sort(compareFn?: ((a: User, b: User) => number) | undefined): User & User[];
        splice(start: number, deleteCount?: number): User[];
        splice(start: number, deleteCount: number, ...items: User[]): User[];
        unshift(...items: User[]): number;
        indexOf(searchElement: User, fromIndex?: number): number;
        lastIndexOf(searchElement: User, fromIndex?: number): number;
        every<S extends User>(predicate: (value: User, index: number, array: User[]) => value is S, thisArg?: any): this is S[];
        every(predicate: (value: User, index: number, array: User[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: User, index: number, array: User[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: User, index: number, array: User[]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: User, index: number, array: User[]) => U, thisArg?: any): U[];
        filter<S extends User>(predicate: (value: User, index: number, array: User[]) => value is S, thisArg?: any): S[];
        filter(predicate: (value: User, index: number, array: User[]) => unknown, thisArg?: any): User[];
        reduce(callbackfn: (previousValue: User, currentValue: User, currentIndex: number, array: User[]) => User): User;
        reduce(callbackfn: (previousValue: User, currentValue: User, currentIndex: number, array: User[]) => User, initialValue: User): User;
        reduce<U>(callbackfn: (previousValue: U, currentValue: User, currentIndex: number, array: User[]) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: User, currentValue: User, currentIndex: number, array: User[]) => User): User;
        reduceRight(callbackfn: (previousValue: User, currentValue: User, currentIndex: number, array: User[]) => User, initialValue: User): User;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: User, currentIndex: number, array: User[]) => U, initialValue: U): U;
        find<S extends User>(predicate: (value: User, index: number, obj: User[]) => value is S, thisArg?: any): S | undefined;
        find(predicate: (value: User, index: number, obj: User[]) => unknown, thisArg?: any): User | undefined;
        findIndex(predicate: (value: User, index: number, obj: User[]) => unknown, thisArg?: any): number;
        fill(value: User, start?: number, end?: number): User & User[];
        copyWithin(target: number, start: number, end?: number): User & User[];
        entries(): ArrayIterator<[number, User]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<User>;
        includes(searchElement: User, fromIndex?: number): boolean;
        flatMap<U, This = undefined>(callback: (this: This, value: User, index: number, array: User[]) => U | readonly U[], thisArg?: This | undefined): U[];
        flat<A, D extends number = 1>(this: A, depth?: D | undefined): FlatArray<A, D>[];
        [Symbol.iterator](): ArrayIterator<User>;
        [Symbol.unscopables]: {
            [x: number]: boolean | undefined;
            length?: boolean | undefined;
            toString?: boolean | undefined;
            toLocaleString?: boolean | undefined;
            pop?: boolean | undefined;
            push?: boolean | undefined;
            concat?: boolean | undefined;
            join?: boolean | undefined;
            reverse?: boolean | undefined;
            shift?: boolean | undefined;
            slice?: boolean | undefined;
            sort?: boolean | undefined;
            splice?: boolean | undefined;
            unshift?: boolean | undefined;
            indexOf?: boolean | undefined;
            lastIndexOf?: boolean | undefined;
            every?: boolean | undefined;
            some?: boolean | undefined;
            forEach?: boolean | undefined;
            map?: boolean | undefined;
            filter?: boolean | undefined;
            reduce?: boolean | undefined;
            reduceRight?: boolean | undefined;
            find?: boolean | undefined;
            findIndex?: boolean | undefined;
            fill?: boolean | undefined;
            copyWithin?: boolean | undefined;
            entries?: boolean | undefined;
            keys?: boolean | undefined;
            values?: boolean | undefined;
            includes?: boolean | undefined;
            flatMap?: boolean | undefined;
            flat?: boolean | undefined;
            [Symbol.iterator]?: boolean | undefined;
            readonly [Symbol.unscopables]?: boolean | undefined;
            at?: boolean | undefined;
        };
        at(index: number): User | undefined;
    }>;
    private generateAccessToken;
    private generateRefreshToken;
    refreshToken(refreshToken: string): Promise<{
        accessToken: string;
    }>;
    logout(userId: number): Promise<void>;
    validateOrganizationAccess(userId: number, organizationId: number): Promise<boolean>;
}
